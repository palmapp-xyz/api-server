{
  "name": "functions",
  "scripts": {
    "build": "",
    "functions:config:testnet": "firebase functions:config:set config.env='testnet'; firebase functions:config:get > .runtimeconfig.json;",
    "functions:config:mainnet": "firebase functions:config:set config.env='mainnet'; firebase functions:config:get > .runtimeconfig.json;",
    "build:testnet": "firebase use testnet; npm run functions:config:testnet; rm -rf lib && tsc",
    "build:watch:testnet": "firebase use testnet; npm run functions:config:testnet; tsc --watch",
    "build:mainnet": "firebase use mainnet; npm run functions:config:mainnet; rm -rf lib && tsc",
    "build:watch:mainnet": "firebase use mainnet; npm run functions:config:mainnet; tsc --watch",
    "serve:testnet": "npm run preserve:testnet; firebase serve; npm run cleanenv;",
    "emulator:testnet": "npm run preserve:testnet; firebase emulators:start --only functions; npm run cleanenv;",
    "shell:testnet": "npm run preserve:testnet; firebase functions:shell; npm run cleanenv;",
    "start:testnet": "npm run shell:testnet",
    "preserve:testnet": "cp $INIT_CWD/../.env.testnet $INIT_CWD/.; npm run build:testnet;",
    "predeploy:testnet": "cp $INIT_CWD/../.env.testnet $INIT_CWD/.; npm run build:testnet;",
    "deploy:testnet": "npm run predeploy:testnet; NODE_ENV=production firebase deploy --only functions; npm run cleanenv",
    "serve:mainnet": "npm run preserve:mainnet; firebase serve; npm run cleanenv;",
    "emulator:mainnet": "npm run preserve:mainnet; firebase emulators:start --only functions; npm run cleanenv;",
    "shell:mainnet": "npm run preserve:mainnet; firebase functions:shell; npm run cleanenv;",
    "start:mainnet": "npm run shell:mainnet",
    "preserve:mainnet": "cp $INIT_CWD/../.env.mainnet $INIT_CWD/.; npm run build:mainnet;",
    "predeploy:mainnet": "cp $INIT_CWD/../.env.mainnet $INIT_CWD/.; npm run build:mainnet;",
    "deploy:mainnet": "npm run predeploy:mainnet; NODE_ENV=production firebase deploy --only functions; npm run cleanenv",
    "cleanenv": "rm -rf $INIT_CWD/.env.*",
    "lint": "eslint --ext .js,.ts .",
    "logs": "firebase functions:log",
    "docs": "npm run build:mainnet && node lib/index.js",
    "test": "mocha --exit --require ts-node/register 'test/*.ts' --timeout 240000"
  },
  "engines": {
    "node": "16"
  },
  "main": "lib/src/index.js",
  "dependencies": {
    "@elastic/elasticsearch": "^8.6.0",
    "@lens-protocol/client": "^1.0.1",
    "@moralisweb3/common-core": "^2.12.0",
    "app-root-path": "^3.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.1",
    "envalid": "7.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^6.7.0",
    "firebase-admin": "^10.0.2",
    "firebase-functions": "^4.2.1",
    "jsonwebtoken": "^9.0.0",
    "moralis": "^2.12.0",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "redis": "^4.2.0",
    "swagger-autogen": "^2.23.0",
    "swagger-ui-express": "^4.6.0",
    "web3": "^1.8.2",
    "web3-utils": "^1.7.5",
    "ethers": "^5.7.2",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "@moralisweb3/eslint-config": "^1.0.2",
    "@types/cors": "^2.8.12",
    "@types/express": "^4.17.14",
    "@types/mocha": "^10.0.1",
    "@types/node": "^18.11.18",
    "@types/swagger-jsdoc": "^6.0.1",
    "@types/swagger-ui-express": "^4.1.3",
    "@types/uuid": "^9.0.0",
    "@typescript-eslint/eslint-plugin": "^5.59.2",
    "@typescript-eslint/parser": "^5.59.2",
    "chai": "^4.3.7",
    "eslint": "^8.9.0",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-etc": "^2.0.2",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-prettier": "^4.2.1",
    "eth-sig-util": "^3.0.1",
    "express-jsdoc-swagger": "^1.8.0",
    "firebase": "^9.17.1",
    "firebase-functions-test": "^3.0.0",
    "jest": "^29.4.1",
    "mocha": "^10.2.0",
    "prettier": "^2.8.8",
    "swagger-jsdoc": "^6.2.8",
    "ts-jest": "^29.0.5",
    "ts-node": "^10.9.1",
    "ts-node-dev": "^2.0.0",
    "typedoc": "^0.23.24",
    "typescript": "^5.0.4"
  },
  "private": true
}
